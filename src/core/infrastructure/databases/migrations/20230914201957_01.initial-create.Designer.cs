// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Netflow.Infrastructure.Databases;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace netflow.core.infrastructure.databases.migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230914201957_01.initial-create")]
    partial class _01initialcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Netflow.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasDefaultValue("netflow")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Supervisors review and approve the work hours and activities recorded by their respective team members.",
                            Name = "Employee Supervisor"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Department review and approve the employee time records for their departments or teams. They ensure accuracy and compliance with department-specific policies.",
                            Name = "Department Manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Resource managers review and approve the overall payroll data, ensuring that the allocation of resources and budget is accurate and aligns with the organization's goals.",
                            Name = "Resource Manager"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Payroll specialists are responsible for calculating gross pay, deductions, and net pay for each employee. They ensure accuracy and compliance with tax regulations.",
                            Name = "Payroll Specialist"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Tax compliance officers oversee tax withholding and ensure that it is done accurately based on employee information and tax laws.",
                            Name = "Tax Compliance Officer"
                        });
                });

            modelBuilder.Entity("Netflow.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("email");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "eduardo.lour.silva@gmail.com"
                        });
                });

            modelBuilder.Entity("Netflow.Entities.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasDefaultValue("netflow")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_workflows");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_workflows_name");

                    b.ToTable("workflows", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Manages employee compensation with precision, covering timekeeping, tax compliance, and benefit administration.",
                            Name = "Payroll Process"
                        });
                });

            modelBuilder.Entity("Netflow.Entities.WorkflowInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseWorkflowId")
                        .HasColumnType("integer")
                        .HasColumnName("base_workflow_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasDefaultValue("netflow")
                        .HasColumnName("created_by");

                    b.Property<int?>("CurrentStepId")
                        .HasColumnType("integer")
                        .HasColumnName("current_step_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_workflow_instances");

                    b.HasIndex("BaseWorkflowId")
                        .HasDatabaseName("ix_workflow_instances_base_workflow_id");

                    b.HasIndex("CurrentStepId")
                        .HasDatabaseName("ix_workflow_instances_current_step_id");

                    b.ToTable("workflow_instances", (string)null);
                });

            modelBuilder.Entity("Netflow.Entities.WorkflowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedNextStepId")
                        .HasColumnType("integer")
                        .HasColumnName("approved_next_step_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasDefaultValue("netflow")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("RejectedNextStepId")
                        .HasColumnType("integer")
                        .HasColumnName("rejected_next_step_id");

                    b.Property<int?>("WorkflowId")
                        .HasColumnType("integer")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_steps");

                    b.HasIndex("ApprovedNextStepId")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_steps_approved_next_step_id");

                    b.HasIndex("RejectedNextStepId")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_steps_rejected_next_step_id");

                    b.HasIndex("WorkflowId")
                        .HasDatabaseName("ix_workflow_steps_workflow_id");

                    b.ToTable("workflow_steps", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Ensure accurate tax withholding based on employee information.",
                            Name = "Tax Withholding",
                            WorkflowId = 1
                        },
                        new
                        {
                            Id = 4,
                            ApprovedNextStepId = 5,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Calculate gross pay, deductions, and net pay for each employee.",
                            Name = "Payroll Calculation",
                            WorkflowId = 1
                        },
                        new
                        {
                            Id = 3,
                            ApprovedNextStepId = 4,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Resource management department reviews and approves payroll data.",
                            Name = "Resource Management Approval",
                            WorkflowId = 1
                        },
                        new
                        {
                            Id = 2,
                            ApprovedNextStepId = 3,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Managers review and approve employee time records.",
                            Name = "Manager Approval",
                            WorkflowId = 1
                        },
                        new
                        {
                            Id = 1,
                            ApprovedNextStepId = 2,
                            CreatedAt = new DateTime(2023, 9, 7, 3, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "netflow",
                            Description = "Employees record their work hours and activities.",
                            Name = "Employee Timekeeping",
                            WorkflowId = 1
                        });
                });

            modelBuilder.Entity("Netflow.Entities.WorkflowStepApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasDefaultValue("netflow")
                        .HasColumnName("created_by");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("last_modified_by");

                    b.Property<int?>("WorkflowStepInstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("workflow_step_instance_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_step_approvals");

                    b.HasIndex("WorkflowStepInstanceId")
                        .HasDatabaseName("ix_workflow_step_approvals_workflow_step_instance_id");

                    b.ToTable("workflow_step_approvals", (string)null);
                });

            modelBuilder.Entity("Netflow.Entities.WorkflowStepInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseStepId")
                        .HasColumnType("integer")
                        .HasColumnName("base_step_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasDefaultValue("netflow")
                        .HasColumnName("created_by");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("WorkflowInstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("workflow_instance_id");

                    b.HasKey("Id")
                        .HasName("pk_workflow_step_instances");

                    b.HasIndex("BaseStepId")
                        .HasDatabaseName("ix_workflow_step_instances_base_step_id");

                    b.HasIndex("WorkflowInstanceId")
                        .HasDatabaseName("ix_workflow_step_instances_workflow_instance_id");

                    b.ToTable("workflow_step_instances", (string)null);
                });

            modelBuilder.Entity("Netflow.Infrastructure.Databases.Configurations.RoleWorkflowStep", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("WorkflowStepId")
                        .HasColumnType("integer")
                        .HasColumnName("workflow_step_id");

                    b.HasKey("RoleId", "WorkflowStepId")
                        .HasName("pk_workflow_step_roles");

                    b.HasIndex("WorkflowStepId")
                        .HasDatabaseName("ix_workflow_step_roles_workflow_step_id");

                    b.ToTable("workflow_step_roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            WorkflowStepId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            WorkflowStepId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            WorkflowStepId = 3
                        },
                        new
                        {
                            RoleId = 4,
                            WorkflowStepId = 4
                        },
                        new
                        {
                            RoleId = 5,
                            WorkflowStepId = 5
                        });
                });

            modelBuilder.Entity("Netflow.Entities.WorkflowInstance", b =>
                {
                    b.HasOne("Netflow.Entities.Workflow", "BaseWorkflow")
                        .WithMany("WorkflowInstances")
                        .HasForeignKey("BaseWorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_instances_workflows_base_workflow_id");

                    b.HasOne("Netflow.Entities.WorkflowStepInstance", "CurrentStep")
                        .WithMany()
                        .HasForeignKey("CurrentStepId")
                        .HasConstraintName("fk_workflow_instances_workflow_step_instance_current_step_id");

                    b.Navigation("BaseWorkflow");

                    b.Navigation("CurrentStep");
                });

            modelBuilder.Entity("Netflow.Entities.WorkflowStep", b =>
                {
                    b.HasOne("Netflow.Entities.WorkflowStep", "ApprovedNextStep")
                        .WithOne()
                        .HasForeignKey("Netflow.Entities.WorkflowStep", "ApprovedNextStepId")
                        .HasConstraintName("fk_workflow_steps_workflow_steps_approved_next_step_id");

                    b.HasOne("Netflow.Entities.WorkflowStep", "RejectedNextStep")
                        .WithOne()
                        .HasForeignKey("Netflow.Entities.WorkflowStep", "RejectedNextStepId")
                        .HasConstraintName("fk_workflow_steps_workflow_steps_rejected_next_step_id");

                    b.HasOne("Netflow.Entities.Workflow", null)
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowId")
                        .HasConstraintName("fk_workflow_steps_workflows_workflow_id");

                    b.OwnsOne("Netflow.Entities.WorkflowStepTimeLimitConfiguration", "StepTimeLimitConfiguration", b1 =>
                        {
                            b1.Property<int>("WorkflowStepId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<bool>("AutoApproveOnThreshold")
                                .HasColumnType("boolean")
                                .HasColumnName("auto_approve_on_threshold");

                            b1.Property<int>("MaximumTimeInMinutes")
                                .HasColumnType("integer")
                                .HasColumnName("maximum_time_in_minutes");

                            b1.HasKey("WorkflowStepId");

                            b1.ToTable("workflow_steps");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowStepId")
                                .HasConstraintName("fk_workflow_steps_workflow_steps_id");

                            b1.HasData(
                                new
                                {
                                    WorkflowStepId = 5,
                                    AutoApproveOnThreshold = true,
                                    MaximumTimeInMinutes = 5
                                });
                        });

                    b.Navigation("ApprovedNextStep");

                    b.Navigation("RejectedNextStep");

                    b.Navigation("StepTimeLimitConfiguration");
                });

            modelBuilder.Entity("Netflow.Entities.WorkflowStepApproval", b =>
                {
                    b.HasOne("Netflow.Entities.WorkflowStepInstance", null)
                        .WithMany("Approvals")
                        .HasForeignKey("WorkflowStepInstanceId")
                        .HasConstraintName("fk_workflow_step_approvals_workflow_step_instance_workflow_ste");
                });

            modelBuilder.Entity("Netflow.Entities.WorkflowStepInstance", b =>
                {
                    b.HasOne("Netflow.Entities.WorkflowStep", "BaseStep")
                        .WithMany()
                        .HasForeignKey("BaseStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_instances_workflow_steps_base_step_id");

                    b.HasOne("Netflow.Entities.WorkflowInstance", "WorkflowInstance")
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_instances_workflow_instances_workflow_instanc");

                    b.OwnsOne("Netflow.Entities.WorkflowStepTimeLimit", "WorkflowStepTimeLimit", b1 =>
                        {
                            b1.Property<int>("WorkflowStepInstanceId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<bool>("AutoApproveOnThreshold")
                                .HasColumnType("boolean")
                                .HasColumnName("auto_approve_on_threshold");

                            b1.Property<DateTime>("ExpiresIn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("expires_in");

                            b1.HasKey("WorkflowStepInstanceId");

                            b1.ToTable("workflow_step_instances");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowStepInstanceId")
                                .HasConstraintName("fk_workflow_step_instances_workflow_step_instances_id");
                        });

                    b.Navigation("BaseStep");

                    b.Navigation("WorkflowInstance");

                    b.Navigation("WorkflowStepTimeLimit");
                });

            modelBuilder.Entity("Netflow.Infrastructure.Databases.Configurations.RoleWorkflowStep", b =>
                {
                    b.HasOne("Netflow.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_roles_roles_role_id");

                    b.HasOne("Netflow.Entities.WorkflowStep", null)
                        .WithMany()
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workflow_step_roles_workflow_steps_workflow_step_id");
                });

            modelBuilder.Entity("Netflow.Entities.Workflow", b =>
                {
                    b.Navigation("Steps");

                    b.Navigation("WorkflowInstances");
                });

            modelBuilder.Entity("Netflow.Entities.WorkflowInstance", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Netflow.Entities.WorkflowStepInstance", b =>
                {
                    b.Navigation("Approvals");
                });
#pragma warning restore 612, 618
        }
    }
}
